#!/bin/bash

make_files_in_commits()
{
    if [[ $# -lt 1 ]]; then
	return 0
    fi

    orig_branch=`git symbolic-ref --short HEAD`
    msg_of_stash=`git stash`
    stashed=1
    if [[ ${msg_of_stash#*"No local changes to save"} != $msg_of_stash ]]; then
	stashed=0
    fi
    echo -e "$msg_of_stash"
    git checkout -b '(make__files)'

    if [[ $stashed == 0 ]]; then
	echo -e "HEAD is now at `git show HEAD --oneline | head -n 1`"
    fi

    num_commits=`git log --oneline --no-merges | wc -l`
    makefile_deleted=0
    while [[ $num_commits != 1 ]]
    do
	msg_of_make=`make -i 2>&1`
	if [[ ${msg_of_make#*ERROR} !=  $msg_of_make ]] ||
	       [[ ${msg_of_make#*"has not been found in loadpath"} != $msg_of_make ]]; then
	    echo "error"
	    break
	fi

	echo $msg_of_make
	commit_no=`git log --oneline --no-merges -n 1 | cut -f 1 -d ' '`
	if [[ $1 == $commit_no* ]]; then
	    break
	fi
	if [[ $commit_no == $1* ]]; then
	    break
	fi

	added_file=`git log --oneline --name-status -n 2 | grep ^A`
	if [[ ${added_file#*Makefile} != $added_file ]]; then
	    git rm --cached Makefile > /dev/null
	    git commit --amend --allow-empty -C HEAD > /dev/null
	    echo "Makefile is added at this commit."
	    echo "Makefile is untracked now."
	    makefile_deleted=1
	fi

	echo
	git reset --hard HEAD^
	num_commits=$((--num_commits))
    done

    echo
    if [ $makefile_deleted == 1 ]; then
	git add Makefile > /dev/null
	git commit -m 'Add Makefile.' > /dev/null
    fi
    git checkout $orig_branch

    if [[ $stashed == 1 ]]; then
	git stash pop
    fi
    git branch -D '(make__files)'

    return 1
}

make_files_in_commits $1

if [[ $? == 0 ]]; then
    echo 'A commit ID is required.'
fi
